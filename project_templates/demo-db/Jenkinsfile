pipeline {
    agent any
    
    environment {
        PROJECT_ROOT = "${env.WORKSPACE}"
        DBCI_PATH = "${env.WORKSPACE}/dbci-tools"
        ATLAS_DEV_URL = "postgres://dev:dev@postgres-dev:5432/dev?search_path=public&sslmode=disable"
        PYTHONDONTWRITEBYTECODE = '1'
        PYTHONUNBUFFERED = '1'
    }
    
    stages {
        stage('Prepare DBCI Tools') {
            steps {
                echo "Preparing DBCI tools repository..."
                script {
                    // Derive DBCI repository URL from the original GIT_URL
                    def originalUrl = env.GIT_URL
                    def dbciRepoUrl = ""
                    
                    if (originalUrl) {
                        // Replace the repository name with 'dbci-tools'
                        dbciRepoUrl = originalUrl.replaceAll(/\/([^\/]+)\.git$/, '/dbci-tools.git')
                        echo "Original repository: ${originalUrl}"
                        echo "DBCI repository: ${dbciRepoUrl}"
                    } else {
                        error("GIT_URL environment variable is not set. Cannot derive DBCI tools repository URL.")
                    }
                    
                    // Clean up any existing dbci-tools directory and clone DBCI tools
                    sh "rm -rf dbci-tools && git clone --branch main --single-branch --depth 1 '${dbciRepoUrl}' dbci-tools"
                    
                    // Make run.sh executable
                    sh "cd ${env.DBCI_PATH} && chmod +x run.sh"
                    
                    echo "DBCI tools cloned to: ${env.DBCI_PATH}"
                }
            }
        }
        
        stage('BUILD') {
            steps {
                echo "Running BUILD stage - generating HCL schema from SQL files..."
                script {
                    sh "cd ${env.DBCI_PATH} && ./run.sh BUILD ${env.PROJECT_ROOT}"
                }
                
                // Archive generated HCL schema file
                archiveArtifacts(
                    artifacts: 'target/schema.hcl',
                    allowEmptyArchive: true,
                    fingerprint: true
                )
            }
            post {
                success {
                    echo "‚úÖ BUILD stage completed successfully - HCL schema generated"
                    publishChecks name: 'BUILD', title: 'Schema Build', summary: 'HCL schema generated successfully', conclusion: 'SUCCESS'
                }
                failure {
                    echo "‚ùå BUILD stage failed - HCL schema generation error"
                    publishChecks name: 'BUILD', title: 'Schema Build', summary: 'HCL schema generation error', conclusion: 'FAILURE'
                }
            }
        }
        
        stage('LINT') {
            steps {
                echo "Running LINT stage - checking SQL code quality..."
                script {
                    sh "cd ${env.DBCI_PATH} && ./run.sh LINT ${env.PROJECT_ROOT}"
                }
            }
            post {
                success {
                    echo "‚úÖ LINT stage completed successfully - no linting errors"
                    publishChecks name: 'LINT', title: 'SQL Linting', summary: 'SQL code quality validated', conclusion: 'SUCCESS'
                }
                failure {
                    echo "‚ùå LINT stage failed - SQL linting errors detected"
                    publishChecks name: 'LINT', title: 'SQL Linting', summary: 'SQL linting errors detected', conclusion: 'FAILURE'
                }
            }
        }
        
        stage('DIFF') {
            steps {
                echo "Running DIFF stage - comparing schema changes against main branch..."
                script {
                    sh "cd ${env.DBCI_PATH} && ./run.sh DIFF ${env.PROJECT_ROOT}"
                }
                
                // Archive diff results including baseline main.hcl
                archiveArtifacts(
                    artifacts: 'target/atlas.migration.*, target/main.hcl, target/schema.hcl',
                    allowEmptyArchive: true,
                    fingerprint: true
                )
            }
            post {
                success {
                    echo "‚úÖ DIFF stage completed successfully - schema diff generated"
                    script {
                        // Check if migration and reports exist
                        def migrationExists = fileExists('target/atlas.migration.sql')
                        def reportExists = fileExists('target/atlas.migration.schema-report.md')
                        def mainHclExists = fileExists('target/main.hcl')
                        
                        def summary = "Schema changes analyzed"
                        if (migrationExists) {
                            echo "üìÑ Atlas migration SQL generated: target/atlas.migration.sql"
                            summary += " (migration SQL generated)"
                        }
                        if (reportExists) {
                            echo "üìä Schema report generated: target/atlas.migration.schema-report.md"
                        }
                        if (mainHclExists) {
                            echo "üìã Main branch baseline saved: target/main.hcl"
                        }
                        
                        publishChecks name: 'DIFF', title: 'Schema Diff', summary: summary, conclusion: 'SUCCESS'
                    }
                }
                failure {
                    echo "‚ùå DIFF stage failed - schema comparison error"
                    publishChecks name: 'DIFF', title: 'Schema Diff', summary: 'Schema comparison error', conclusion: 'FAILURE'
                }
            }
        }
        
        stage('GUARD') {
            steps {
                echo "Running GUARD stage - validating schema changes..."
                script {
                    sh "cd ${env.DBCI_PATH} && ./run.sh GUARD ${env.PROJECT_ROOT}"
                }
            }
            post {
                success {
                    echo "‚úÖ GUARD stage completed successfully - schema validation passed"
                    publishChecks name: 'GUARD', title: 'Schema Guard', summary: 'Schema validation successful', conclusion: 'SUCCESS'
                }
                failure {
                    echo "‚ùå GUARD stage failed - schema validation errors detected"
                    publishChecks name: 'GUARD', title: 'Schema Guard', summary: 'Schema validation errors detected', conclusion: 'FAILURE'
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline execution completed"
            
            // Clean up workspace artifacts but keep important files
            script {
                sh "find . -name '*.tmp' -delete 2>/dev/null || true && find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true"
            }
        }
        
        success {
            echo """
            üéâ All stages completed successfully! 
            
            Pipeline Summary:
            ‚úÖ DBCI Tools: Cloned and ready
            ‚úÖ BUILD: HCL schema generated to target/schema.hcl
            ‚úÖ LINT: SQL code quality validated (SQLFluff)
            ‚úÖ DIFF: Schema changes analyzed with Atlas CLI
            ‚úÖ GUARD: Schema validation passed
            
            Check the archived artifacts for:
            - HCL schema files (target/schema.hcl, target/main.hcl)
            - Atlas migration SQL (target/atlas.migration.sql)
            - Schema analysis report (target/atlas.migration.schema-report.md)
            - Schema changes JSON (target/atlas.migration.schema-changes.json)
            """
            
            script {
                publishChecks name: 'DBCI-Pipeline', title: 'DBCI Complete', summary: 'All DBCI stages completed successfully', conclusion: 'SUCCESS'
            }
        }
        
        failure {
            echo """
            ‚ùå Pipeline failed at one or more stages.
            
            Check the stage logs above for detailed error information.
            Common issues:
            - SQL syntax errors (BUILD/LINT stages)
            - Schema validation failures (GUARD stage) 
            - Git repository access issues (Clone stage)
            """
        }
        
        cleanup {
            // Optional: Clean up DBCI tools directory if desired
            // sh "rm -rf ${params.DBCI_LOCATION}"
            echo "Pipeline cleanup completed"
        }
    }
}